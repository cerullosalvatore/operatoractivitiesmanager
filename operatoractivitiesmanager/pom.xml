<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.salvatorecerullo.app</groupId>
	<artifactId>operatoractivitiesmanager</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>
	<name>operatoractivitiesmanager</name>
	<url>http://www.example.com</url>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<!-- Java version to compile -->
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>

		<!-- All dependencies versions are listed below -->
		<org.apache.logging.log4j.version>2.13.0</org.apache.logging.log4j.version>
		<junit.version>4.13</junit.version>
		<org.assertj.version>3.17.1</org.assertj.version>
		<org.mockito.version>3.2.4</org.mockito.version>
		<org.mongodb.version>3.12.7</org.mongodb.version>
		<ch.qos.logback.version>1.2.3</ch.qos.logback.version>
		<de.bwaldvogel.version>1.11.1</de.bwaldvogel.version>
		<info.picocli.version>4.6.1</info.picocli.version>
		<org.awaitility.version>4.1.1</org.awaitility.version>

		<!-- All plugins versions are listed below -->
		<org.pitest.version>1.5.2</org.pitest.version>
		<org.jacoco.version>0.8.6</org.jacoco.version>
		<org.eluder.coveralls.version>4.3.0</org.eluder.coveralls.version>
		<org.sonarsource.scanner.maven.version>3.8.0.2131</org.sonarsource.scanner.maven.version>
		<org.codehaus.mojo.version>3.2.0</org.codehaus.mojo.version>
		<io.fabric8.version>0.34.1</io.fabric8.version>

		<!-- SonarCloud Poreperties -->
		<sonar.organization>cerullosalvatore</sonar.organization>
		<sonar.host.url>https://sonarcloud.io</sonar.host.url>
		<sonar.projectKey>cerullosalvatore_operatoractivitiesmanager</sonar.projectKey>
		<sonar.coverage.exclusions>
			**/OperatorActivitiesManagerSwingApp.*,
			**/model/*.*
		</sonar.coverage.exclusions>
		<sonar.coverage.jacoco.xmlReportPaths>
			${project.build.directory}/surefire-reports,
			${project.build.directory}/failsafe-reports
		</sonar.coverage.jacoco.xmlReportPaths>
	</properties>

	<!-- Maven automatically downloads dependencies specified below, that is, 
		the Java libraries that your project needs to compile and run the tests. -->
	<dependencies>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
			<version>${org.apache.logging.log4j.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>${org.apache.logging.log4j.version}</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-swing-junit</artifactId>
			<version>${org.assertj.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>${org.mockito.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mongodb</groupId>
			<artifactId>mongo-java-driver</artifactId>
			<version>${org.mongodb.version}</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${ch.qos.logback.version}</version>
		</dependency>
		<dependency>
			<groupId>de.bwaldvogel</groupId>
			<artifactId>mongo-java-server</artifactId>
			<version>${de.bwaldvogel.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>info.picocli</groupId>
			<artifactId>picocli</artifactId>
			<version>${info.picocli.version}</version>
		</dependency>
		<dependency>
			<groupId>org.awaitility</groupId>
			<artifactId>awaitility</artifactId>
			<version>${org.awaitility.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<!-- In this section we can configure each plugin specifyng its Maven Coordinates, 
			optional configuration and the bindings of its goals to the lifecycle phases. -->
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>3.0.0-M5</version>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>2.22.1</version>
				<configuration>
					<systemPropertyVariables>
						<mongo.port>${mongo.mapped.port}</mongo.port>
					</systemPropertyVariables>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
					</execution>
					<execution>
						<id>e2e-tests</id>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
						<configuration>
							<excludes>
								<exclude>**/*IT.java</exclude>
							</excludes>
							<includes>
								<include>**/*E2E.java</include>
							</includes>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.pitest</groupId>
				<artifactId>pitest-maven</artifactId>
				<version>${org.pitest.version}</version>
				<configuration>
					<excludedClasses>
						<param>com.salvatorecerullo.app.operatoractivitiesmanager.model.*</param>
						<param>com.salvatorecerullo.app.operatoractivitiesmanager.app.swing.*</param>
					</excludedClasses>
					<targetClasses>
						<param>com.salvatorecerullo.app.operatoractivitiesmanager.repository.mongo.*</param>
						<param>com.salvatorecerullo.app.operatoractivitiesmanager.controller.*</param>
					</targetClasses>
					<targetTests>
						<param>com.salvatorecerullo.app.operatoractivitiesmanager.controller.*Test</param>
						<param>com.salvatorecerullo.app.operatoractivitiesmanager.repository.mongo.*Test</param>
						<param>com.salvatorecerullo.app.operatoractivitiesmanager.*Test</param>
					</targetTests>
					<excludedTestClasses>
						<param>*.swing.*</param>
						<param>*IT</param>
						<param>*E2E</param>
					</excludedTestClasses>
					<mutators>
						<mutator>STRONGER</mutator>
					</mutators>
					<mutationThreshold>100</mutationThreshold>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${org.jacoco.version}</version>
				<configuration>
					<excludes>
						<exclude>**/app/swing/*.*</exclude>
						<exclude>**/model/*.*</exclude>
					</excludes>
				</configuration>
				<executions>
					<execution>
						<goals>
							<!-- binds by default to the phase "initialize" -->
							<goal>prepare-agent</goal>
							<!-- binds by default to the phase "verify" -->
							<goal>report</goal>
						</goals>
					</execution>
					<!-- another execution possible is check with a configuration -->
				</executions>
			</plugin>
			<plugin>
				<groupId>org.eluder.coveralls</groupId>
				<artifactId>coveralls-maven-plugin</artifactId>
				<version>${org.eluder.coveralls.version}</version>
				<dependencies>
					<!-- This is required when using JDK 9 or higher since javax.xml.bind 
						has been removed from the JDK -->
					<dependency>
						<groupId>javax.xml.bind</groupId>
						<artifactId>jaxb-api</artifactId>
						<version>2.3.1</version>
					</dependency>
				</dependencies>
			</plugin>
			<plugin>
				<groupId>org.sonarsource.scanner.maven</groupId>
				<artifactId>sonar-maven-plugin</artifactId>
				<version>${org.sonarsource.scanner.maven.version}</version>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>${org.codehaus.mojo.version}</version>
				<executions>
					<execution>
						<id>add-test-source</id>
						<phase>generate-test-sources</phase>
						<goals>
							<goal>add-test-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>src/it/java</source>
								<source>src/e2e/java</source>
							</sources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>${io.fabric8.version}</version>
				<configuration>
					<images>
						<image>
							<name>mongo:4.4.3</name>
							<run>
								<ports>
									<port>mongo.mapped.port:27017</port>
								</ports>
							</run>
						</image>
					</images>
				</configuration>
				<executions>
					<execution>
						<id>docker-start</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>start</goal>
						</goals>
					</execution>
					<execution>
						<id>docker-stop</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>stop</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<descriptorRefs>
								<descriptorRef>jar-with-dependencies</descriptorRef>
							</descriptorRefs>
							<archive>
								<manifest>
									<mainClass>com.salvatorecerullo.app.operatoractivitiesmanager.app.swing.OperatorActivitiesManagerSwingApp</mainClass>
								</manifest>
							</archive>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<!-- Maven profiles are a mechanism that allows you to activate a subset 
		of configurations. Now in a standard Maven build, neither JaCoCo nor PIT 
		will be used; they can be enabled on the command line with -P and their ids. 
		For example, in this build they will both be enabled: mvn clean verify -Pjacoco,mutation-testing -->
	<profiles>
		<profile>
			<id>jacoco</id>
			<build>
				<plugins>
					<plugin>
						<!-- configured in pluginManagement -->
						<groupId>org.jacoco</groupId>
						<artifactId>jacoco-maven-plugin</artifactId>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>mutation-testing</id>
			<build>
				<plugins>
					<plugin>
						<!-- configured also in pluginManagement -->
						<groupId>org.pitest</groupId>
						<artifactId>pitest-maven</artifactId>
						<executions>
							<execution>
								<goals>
									<goal>mutationCoverage</goal>
								</goals>
								<phase>verify</phase>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
	